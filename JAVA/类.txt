Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-10-11T20:39:27+08:00

====== 类 ======
创建日期 星期三 11 十月 2017
修饰符
{{~/图片/document-uid79144labid1072timestamp1434941168916.png}}

this 关键字

我们在书写代码的过程中常常会用到this关键字，this关键字代表当前对象。使用this.属性操作当前对象的属性，this.方法调用当前对象的方法。

 

内部类


可以将一个类的定义放在另一个类的定义内部，这就是内部类。而包含内部类的类被称为外部类。

内部类的主要作用如下：

内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类

内部类的方法可以直接访问外部类的所有数据，包括私有的数据

内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便

内部类允许继承多个非接口类型（具体将在以后的内容进行讲解）


成员内部类

package com.shiyanlou;

//外部类People
public class People {
	private String name = "LiLei";         //外部类的私有属性
	//内部类Student
	public class Student {
		String ID = "20151234";               //内部类的成员属性
		//内部类的方法
		public void stuInfo(){
			System.out.println("访问外部类中的name：" + name);
			System.out.println("访问内部类中的ID：" + ID);
		}
	}

	//测试成员内部类
	public static void main(String[] args) {
		People a = new People();     //创建外部类对象，对象名为a
		Student b = a.new Student(); //使用外部类对象创建内部类对象，对象名为b
		// 或者为 People.Student b = a.new Student();
		b.stuInfo();   //调用内部对象的suInfo方法
	}
}



Student 类相当于 People 类的一个成员变量，所以 Student 类可以使用任意访问修饰符

Student 类在 People 类里，所以访问范围在类里的所有方法均可以访问 People 的属性（即内部类里可以直接访问外部类的方法和属性，反之不行）

定义成员内部类后，必须使用外部类对象来创建内部类对象，即 内部类 对象名 = 外部类对象.new 内部类();

如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，如果要访问外部类的成员变量，可以使用 this 关键字

如上述代码中：a.this


静态内部类

package com.shiyanlou;

//外部类People
public class People {
	private String name = "LiLei";         //外部类的私有属性

/*外部类的静态变量。
Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。
*/
	static String ID = "510xxx199X0724XXXX"; 

	//静态内部类Student
	public static class Student {
		String ID = "20151234";               //内部类的成员属性
		//内部类的方法
		public void stuInfo(){
			System.out.println("访问外部类中的name：" + (new People().name));
			System.out.println("访问外部类中的ID：" + People.ID);
			System.out.println("访问内部类中的ID：" + ID);
		}
	}

	//测试成员内部类
	public static void main(String[] args) {
		Student b = new Student();   //直接创建内部类对象，对象名为b
		b.stuInfo();                 //调用内部对象的suInfo方法
	}
}

静态内部类是 static 修饰的内部类，这种内部类的特点是：

静态内部类不能直接访问外部类的非静态成员，但可以通过 new 外部类().成员 的方式访问

如果外部类的静态成员与内部类的成员名称相同，可通过类名.静态成员访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过成员名直接调用外部类的静态成员

创建静态内部类的对象时，不需要外部类的对象，可以直接创建 内部类 对象名= new 内部类();



局部内部类

局部内部类，是指内部类定义在方法和作用域内。
局部内部类也像别的类一样进行编译，但只是作用域不同而已，只在该方法或条件的作用域内才能使用，退出这些作用域后无法引用的。

package com.shiyanlou;

//外部类People
public class People {    
	//定义在外部类中的方法内：
	public void peopleInfo() {
		final String sex = "man";  //外部类方法中的常量
		class Student {
			String ID = "20151234"; //内部类中的常量
			public void print() {
				System.out.println("访问外部类的方法中的常量sex：" + sex);
				System.out.println("访问内部类中的变量ID:" + ID);
			}
		}
		Student a = new Student();  //创建方法内部类的对象
		a.print();//调用内部类的方法
	}
	//定义在外部类中的作用域内
	public void peopleInfo2(boolean b) {
		if(b){
			final String sex = "man";  //外部类方法中的常量
			class Student {
				String ID = "20151234"; //内部类中的常量
				public void print() {
					System.out.println("访问外部类的方法中的常量sex：" + sex);
					System.out.println("访问内部类中的变量ID:" + ID);
				}
			}
			Student a = new Student();  //创建方法内部类的对象
			a.print();//调用内部类的方法
		}
	}
	//测试方法内部类
	public static void main(String[] args) {
		People b = new People(); //创建外部类的对象
		System.out.println("定义在方法内：===========");
		b.peopleInfo();  //调用外部类的方法
		System.out.println("定义在作用域内：===========");
		b.peopleInfo2(true);
	}
}






匿名内部类

匿名内部类，顾名思义，就是没有名字的内部类。正因为没有名字，所以匿名内部类只能使用一次，它通常用来简化代码编写。但使用匿名内部类还有个前提条件：必须继承一个父类或实现一个接口。



package com.shiyanlou;

public class Outer { 

	public Inner getInner(final String name, String city) { 
		return new Inner() { 
			private String nameStr = name; 
			public String getName() { 
				return nameStr; 
			} 
		}; 
	} 

	public static void main(String[] args) { 
		Outer outer = new Outer(); 
		Inner inner = outer.getInner("Inner", "NewYork"); 
		System.out.println(inner.getName()); 
	} 
} 
interface Inner { 
	String getName(); 
}

运行结果：Inner

匿名内部类是不能加访问修饰符的。要注意的是，new 匿名类，这个类是要先定义的,如果不先定义，编译时会报错该类找不到。

同时，在上面的例子中，当所在的方法的形参需要在内部类里面使用时，该形参必须为final。这里可以看到形参 name 已经定义为final了，而形参city 没有被使用则不用定义为final。

然而，因为匿名内部类没名字，是用默认的构造函数的，无参数的，如果需要该类有带参数的构造函数，示例如下：

   public Inner getInner(final String name, String city) { 
		return new Inner(name, city) { 
			private String nameStr = name; 

			public String getName() { 
				return nameStr; 
			} 
		}; 
	}
注意这里的形参city，由于它没有被匿名内部类直接使用，而是被抽象类Inner的构造函数所使用，所以不必定义为final。



继承

class 子类 extends 父类
继承的特点：

子类拥有父类除private以外的所有属性和方法
子类可以拥有自己的属性和方法
子类可以重写实现父类的方法
Java 中的继承是单继承，一个类只有一个父类

方法的重写

重写的方法一定要与原父类的方法语法保持一致，比如返回值类型，参数类型及个数，和方法名都必须一致。


继承的初始化顺序
系统先创建了父类对象，再创建了子类对象，先初始化了属性，再调用了构造函数。

final关键字可以修饰类、方法、属性和变量

final 修饰类，则该类不允许被继承，为最终类

final 修饰方法，则该方法不允许被覆盖（重写）

final 修饰属性：则该类的属性不会进行隐式的初始化（类的初始化属性必须有值）或在构造方法中赋值（但只能选其一）

final 修饰变量，则该变量的值只能赋一次值，即变为常量

super关键字在子类内部使用，代表父类对象。

访问父类的属性 super.属性名

访问父类的方法 super.bark()

子类构造方法需要调用父类的构造方法时，在子类的构造方法体里最前面的位置：super()



多态

Java 实现多态有三个必要条件：继承、重写和向上转型（即父类引用指向子类对象）。

抽象类和抽象方法



那我们什么时候会用到抽象类呢？

在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。也就是说抽象类是约束子类必须要实现哪些方法，而并不关注方法如何去实现。

从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。

所以由上可知，抽象类是限制规定子类必须实现某些方法，但不关注实现细节。

那抽象类如何用代码实现呢，它的规则如下：

用 abstract 修饰符定义抽象类

用 abstract 修饰符定义抽象方法，只用声明，不需要实现

包含抽象方法的类就是抽象类

抽象类中可以包含普通的方法，也可以没有抽象方法

抽象类的对象不能直接创建，我们通常是定义引用变量指向子类对象。




接口实现

abstract 关键字允许人们在类中创建一个或多个没有任何定义的方法，而 interface 使抽象的概念更向前迈进了一步，它会产生一个完全抽象类，根本没有提供任何方法体。

接口的声明语法格式如下：

修饰符 interface 接口名称 [extends 其他的类名] {
		// 声明变量
		// 抽象方法
}


注意点：

接口不能用于实例化对象
接口中所有的方法是抽象方法
接口成员是 static final 类型
接口支持多继承


多继承实现方式：


修饰符 interface A extends 接口1，接口2{

}

修饰符 class A implements 接口1，接口2{

}









