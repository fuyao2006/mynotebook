Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-10-12T21:35:17+08:00

====== 面向对象2 ======
创建日期 星期四 12 十月 2017

常用的类方法
toString() 方法 在使用println对象时 默认调用
System.out.println(p)
System.out.println(p.toString())  等价

public String toString() {
//
return “abc”
}

== 和 equals方法 ==

==比较的两个变量的值是否相等，不能用于比较两个引用

equals方法
public boolean equals(Object obj)
{
if(this==obj)
return ture;
if(obj!=null and obj.getclass==Person.class) //类等价
{
Person personObj=(Person)obj;
if(this.getIdStr().equals(personObj.getIdStr()))////值等价
{return ture;}

}
return flase;
}


单例类
1.构造器用private修饰
2.用一个类成员缓存创建的实例//用static修饰的成员变量
3.类方法控制和创建实例//用static修饰的方法


final修饰符

final成员变量
1.必须显示赋值。
2.只可赋值一次，不可以多次赋值

final形参
不可以在方法中再次赋值
final方法
不可以重写，可以重载
private修饰的子类中可以重新定义

final类
不可被继承

不可变类
8个包装类和String类

自定义不可变类
1.用private 和final修饰成员变量
2.带参数的构造器，用于初始化成员变量
3.成员变量仅有getter无setter
4.如有必要重写hashCode()和equals()
5.若成员变量是对象
public class Person
{
private final Name name;
public Person(Name name)
{
this.name=new Name(name);
}

public Name getName()
{
retrun new Name(name);
}


}



抽象类
抽象类要使用abstract修饰 抽象方法也要用abstract修饰 
抽象方法不能有函数体
抽象类不能实例化
抽象类可以包含成员/方法/初始化块/构造器/内部类5种，构造器不能用于创建实例，只用于子类调用
包含抽象方法的类为抽象类，抽象方法包含继承自父类的方法

abstract与final和static不能一起使用

public abstract class abc
{
public abstract void test();//无方法体

}


接口
[修饰符] interface 接口名 extends 父接口1，父接口2.....
{
零个或多个常量定义 //定义的变量系统会用static final修饰  默认是public的
零个或多个抽象方法定义
零个或多个类方法或默认方法  类方法使用static修饰 默认方法用default 修饰
零个或多个内部类/接口/枚举定义
}

使用接口

类实现接口时 使用implements 关键字 当类同时继承父类时 需要放在类后面
public class Apple extends Fruit implements abc,a2
{}

接口和抽象类的区别
1.成员
接口成员：静态变量/抽象方法/默认方法/类方法
抽象类：静态成员/抽象方法/类方法/普通方法/成员变量
2.构造器，初始化块
接口不能有
抽象类可以有
3.限制
一个类只能继承一个抽象类，但是可以继承多个接口



内部类
1.内部类成员可以访问外部类的私有数据
2.非静态内部类不能拥有静态成员
3.内部类比外部类多使用三个修饰符：private protected static
4.外部类的静态成员中不能使用非静态内部类

内部类实际是和外部类一样是类不是实例，无法直接访问非静态内部类的成员，必须要创建内部类对象

静态内部类
可以包含静态成员和非静态成员
静态成员只能访问外部类的静态成员
外部类访问内部类时，必须用内部类名限制（静态成员）

内部类的使用
外部类内部（略）
外部类外部
内部类的名字实际为：outclass.innerclass
定义内部类变量 outclass.innerclass 变量名
创建非静态内部类实例
new 外部类.new 内部类；
创建静态内部类实例
new 外部类.内部类();

匿名内部类

new 实现接口()|父类构造器(实参列表)
{
//类体部分
} 
注意匿名内部类的成员变量，均是final变量 不能修改
